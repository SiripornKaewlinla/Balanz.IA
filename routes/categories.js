const express = require('express');
const jwt = require('jsonwebtoken');
const Category = require('../models/Categories');
const Transaction = require('../models/Transaction');

const router = express.Router();

// ‡πÉ‡∏ä‡πâ JWT_SECRET ‡∏à‡∏≤‡∏Å env ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dev
const JWT_SECRET = process.env.JWT_SECRET || 'devsecret';

const authMiddleware = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).json({ message: 'No token provided' });
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token' });
  }
};

// GET /api/categories ‚Äî ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
router.get('/', authMiddleware, async (req, res) => {
  try {
    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (UTF-8 ‡∏õ‡∏Å‡∏ï‡∏¥)
    const defaultCategories = [
      // ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
      { name: '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', icon: 'üíº', type: 'income' },
      { name: '‡πÇ‡∏ö‡∏ô‡∏±‡∏™', icon: 'üéÅ', type: 'income' },
      { name: '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', icon: 'üìà', type: 'income' },
      { name: '‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç', icon: 'üéâ', type: 'income' },
      { name: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ', icon: '‚ûï', type: 'income' },
      // ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
      { name: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£', icon: 'üçö', type: 'expense' },
      { name: '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', icon: 'üöå', type: 'expense' },
      { name: '‡∏ä‡∏≠‡∏õ‡∏õ‡∏¥‡∏á', icon: 'üõçÔ∏è', type: 'expense' },
      { name: '‡∏ö‡∏¥‡∏•/‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ', icon: 'üìÑ', type: 'expense' },
      { name: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', icon: 'üè•', type: 'expense' },
      { name: '‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á', icon: 'üé¨', type: 'expense' },
      { name: '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', icon: 'üìö', type: 'expense' },
      { name: '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', icon: '‚úàÔ∏è', type: 'expense' },
      { name: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ö‡πâ‡∏≤‡∏ô', icon: 'üõí', type: 'expense' },
      { name: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', icon: 'üìÅ', type: 'expense' },
    ];

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
    for (const cat of defaultCategories) {
      await Category.findOneAndUpdate(
        { name: cat.name, userId: req.user.userId, type: cat.type },
        { name: cat.name, icon: String(cat.icon), type: cat.type, userId: req.user.userId },
        { upsert: true, new: true, setDefaultsOnInsert: true }
      );
    }

    const categories = await Category.find({ userId: req.user.userId }).sort({ type: 1, name: 1 });
    res.json(categories);
  } catch (error) {
    res.status(500).json({ message: 'Server error: ' + error.message });
  }
});

// POST /api/categories ‚Äî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
router.post('/', authMiddleware, async (req, res) => {
  const { name, icon, type } = req.body || {};
  if (!type || !['income', 'expense'].includes(type)) {
    return res.status(400).json({ message: 'Type ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô "income" ‡∏´‡∏£‡∏∑‡∏≠ "expense"' });
  }
  if (!name || typeof name !== 'string') {
    return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' });
  }
  try {
    const existingCategory = await Category.findOne({ name, userId: req.user.userId, type });
    if (existingCategory) {
      return res.status(400).json({ message: '‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' });
    }
    const category = new Category({
      name,
      icon: icon ? String(icon) : 'üìÅ',
      type,
      userId: req.user.userId,
    });
    await category.save();
    res.status(201).json(category);
  } catch (error) {
    res.status(500).json({ message: 'Server error: ' + error.message });
  }
});

// DELETE /api/categories/:categoryId ‚Äî ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
router.delete('/:categoryId', authMiddleware, async (req, res) => {
  const { categoryId } = req.params;
  try {
    const category = await Category.findById(categoryId);
    if (!category) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' });
    }
    if (category.userId.toString() !== req.user.userId) {
      return res.status(403).json({ message: 'Forbidden' });
    }

    await Category.deleteOne({ _id: categoryId });

    // ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    let otherCategory = await Category.findOne({ name: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', type: category.type, userId: req.user.userId });
    if (!otherCategory) {
      otherCategory = new Category({ name: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', icon: 'üìÅ', type: category.type, userId: req.user.userId });
      await otherCategory.save();
    }

    // ‡∏¢‡πâ‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏´‡∏°‡∏ß‡∏î "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
    await Transaction.updateMany(
      { category: category._id, userId: req.user.userId },
      { $set: { category: otherCategory._id } }
    );

    res.json({ message: '‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"' });
  } catch (error) {
    console.error('Delete category error:', error);
    res.status(500).json({ message: 'Server error: ' + error.message });
  }
});

module.exports = router;

